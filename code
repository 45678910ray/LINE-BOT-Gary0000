from flask import Flask, request, abort

from linebot import (
    LineBotApi, WebhookHandler
)
from linebot.exceptions import (
    InvalidSignatureError
)
from linebot.models import *

app = Flask(__name__)

# Channel Access Token
line_bot_api = LineBotApi('your line api')
# Channel Secret
handler = WebhookHandler('873c79ccb6e05a6e3fdb848dfecf1748')

# 監聽所有來自 /callback 的 Post Request
@app.route("/callback", methods=['POST'])

def callback():
    # get X-Line-Signature header value
    signature = request.headers['X-Line-Signature']
    # get request body as text
    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)
    # handle webhook body
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'
def Get_Cve_Description(CVE):
    CVE=CVE.split('-',1)[1]
    urlCVE="https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword="+CVE
    res=requests.get(urlCVE)
    sp=BeautifulSoup(res.text,'html.parser')
    Description = sp.find_all('td',{'valign':'top'})
    Description=Description[1].text.replace('\n\n','\n')
    Description="描述:"+'\n'+Description
    #print(Description)
    return Description
def Get_Cve_NVD(CVE):
    urlNVD = 'https://nvd.nist.gov/vuln/detail/' + CVE
    res = requests.get(urlNVD)
    sp = BeautifulSoup(res.text, 'html.parser')

    Score = ""
    detal = sp.select(".severityDetail")
    if detal[0].text != ' N/A':
        Score += "CVSS 3.x:" + detal[0].text.replace('\n', '') + '\n' + Get_Cve_CVSSdetail3X(CVE) + "CVSS 2.0:" + detal[
            1].text + '\n' + Get_Cve_CVSSdetail20(CVE)
    else:
        Score += "CVSS 3.x:" + detal[0].text + '\n' + Get_Cve_CVSSdetail3X(CVE) + "CVSS 2.0:" + detal[
            1].text + '\n' + Get_Cve_CVSSdetail20(CVE)

    Weakness = ""
    Weakness = "弱點枚舉:" + '\n'
    detal = sp.select("#vulnTechnicalDetailsDiv table.table-striped.table-condensed.table-bordered.detail-table a")
    for i in range(len(detal)):
        Weakness += detal[i].text + ":" + '\n' + detal[i]['href'] + '\n'
        
    allNVD = ""
    allNVD += Score + Weakness
    return allNVD
def Get_Cve_CVSSdetail20(CVE):
    urlNVD = "https://nvd.nist.gov/vuln/detail/" + CVE
    res = requests.get(urlNVD)
    sp = BeautifulSoup(res.text, 'html.parser')
    Vector = sp.select("#vulnCvssPanel span .tooltipCvss2NistMetrics")
    CVSSdetail = ""
    if len(Vector) == 0:
        return ("NO CVSS 2.0 IN NVD" + '\n')
    else:
        a = Vector[0].text.replace("(", "").replace(")", "").split('/')
        if a[0].split(":")[1] == "L":
            CVSSdetail += "Access Vector(攻擊向量):" + "Local(在不連接網路的狀況下進行攻擊)" + '\n'
        elif a[0].split(":")[1] == "A":
            CVSSdetail += "Access Vector(攻擊向量):" + "Adjacent Network(由受限制的網路進行攻擊，如區域網路及藍芽等)" + '\n'
        elif a[0].split(":")[1] == "N":
            CVSSdetail += "Access Vector(攻擊向量):" + "Network(由網際網路網路進行攻擊)" + '\n'

        if a[1].split(":")[1] == "H":
            CVSSdetail += "Access Complexity(攻擊複雜度):" + "HIGH" + '\n'
        elif a[1].split(":")[1] == "M":
            CVSSdetail += "Access Complexity(攻擊複雜度):" + "Medium" + '\n'
        elif a[1].split(":")[1] == "L":
            CVSSdetail += "Access Complexity(攻擊複雜度):" + "LOW" + '\n'

        if a[2].split(":")[1] == "M":
            CVSSdetail += "Authentication(認證方式):" + "Multiple(此漏洞需要攻擊者進行兩次或兩次以上的身份驗證)" + '\n'
        elif a[2].split(":")[1] == "S":
            CVSSdetail += "Authentication(認證方式):" + "Single(該漏洞要求攻擊者登錄到系統中)" + '\n'
        elif a[2].split(":")[1] == "N":
            CVSSdetail += "Authentication(認證方式):" + "NONE" + '\n'

        if a[3].split(":")[1] == "N":
            CVSSdetail += "Confidentiality Impact(機密性影響):" + "NONE" + '\n'
        elif a[3].split(":")[1] == "P":
            CVSSdetail += "Confidentiality Impact(機密性影響):" + "Partial(攻擊者可以取得機密資料，但無法使用該資料)" + '\n'
        elif a[3].split(":")[1] == "C":
            CVSSdetail += "Confidentiality Impact(機密性影響):" + "Complete(攻擊者可以取得機密資料，且可以使用該資料)" + '\n'

        if a[4].split(":")[1] == "N":
            CVSSdetail += "Integrity Impact(完整性影響):" + "NONE" + '\n'
        elif a[4].split(":")[1] == "P":
            CVSSdetail += "Integrity Impact(完整性影響):" + "Partial(攻擊者有部分權限以竄改某些資料，對含有漏洞之元件影響較小)" + '\n'
        elif a[4].split(":")[1] == "C":
            CVSSdetail += "Integrity Impact(完整性影響):" + "Complete(攻擊者有權限竄改所有資料，對含有漏洞之元件有嚴重影響)" + '\n'

        if a[5].split(":")[1] == "N":
            CVSSdetail += "Availability Impact(可用性影響):" + "NONE" + '\n'
        elif a[5].split(":")[1] == "P":
            CVSSdetail += "Availability Impact(可用性影響):" + "Partial(可用性受到影響，導致服務或元件仍可被部分取得，或是時好時壞)" + '\n'
        elif a[5].split(":")[1] == "C":
            CVSSdetail += "Availability Impact(可用性影響):" + "Complete(攻擊者有權限竄改所有資料，對含有漏洞之元件有嚴重影響)" + '\n'

        return CVSSdetail
def Get_Cve_CVSSdetail3X(CVE):
    urlNVD = "https://nvd.nist.gov/vuln/detail/" + CVE
    res = requests.get(urlNVD)
    sp = BeautifulSoup(res.text, 'html.parser')
    Vector = sp.select("#vulnCvssPanel span .tooltipCvss3NistMetrics")
    CVSSdetail = ""
    if len(Vector) == 0:
        return ("NO CVSS 3.X IN NVD" + '\n')
    else:
        a = Vector[0].text.split("/")
        if a[1].split(":")[1] == "N":
            CVSSdetail += "Attack Vector(攻擊向量):" + "Network(由網際網路網路進行攻擊)" + '\n'
        elif a[1].split(":")[1] == "A":
            CVSSdetail += "Attack Vector(攻擊向量):" + "Adjacent(由受限制的網路進行攻擊，如區域網路及藍芽等)" + '\n'
        elif a[1].split(":")[1] == "L":
            CVSSdetail += "Attack Vector(攻擊向量):" + "Local(在不連接網路的狀況下進行攻擊)" + '\n'
        elif a[1].split(":")[1] == "P":
            CVSSdetail += "Attack Vector(攻擊向量):" + "Physical(需接觸到實體機器才能進行攻擊)" + '\n'

        if a[2].split(":")[1] == "L":
            CVSSdetail += "Attack Complexity(攻擊複雜度):" + "LOW" + '\n'
        elif a[2].split(":")[1] == "H":
            CVSSdetail += "Attack Complexity(攻擊複雜度):" + "HIGH" + '\n'

        if a[3].split(":")[1] == "N":
            CVSSdetail += "Privileges Required(是否需要提權):" + "NONE" + '\n'
        elif a[3].split(":")[1] == "L":
            CVSSdetail += "Privileges Required(是否需要提權):" + "LOW" + '\n'
        elif a[3].split(":")[1] == "H":
            CVSSdetail += "Privileges Required(是否需要提權):" + "HIGH" + '\n'

        if a[4].split(":")[1] == "N":
            CVSSdetail += "User Interaction(是否需要使用者操作):" + "NONE" + '\n'
        elif a[4].split(":")[1] == "R":
            CVSSdetail += "User Interaction(是否需要使用者操作):" + "Required" + '\n'

        if a[5].split(":")[1] == "U":
            CVSSdetail += "Scope(影響範圍):" + "Unchanged(僅影響含有漏洞的元件本身)" + '\n'
        elif a[5].split(":")[1] == "C":
            CVSSdetail += "Scope(影響範圍):" + "Changed(會影響到含有漏洞的元件以外的元件)" + '\n'

        if a[6].split(":")[1] == "N":
            CVSSdetail += "Confidentiality(機密性影響):" + "NONE" + '\n'
        elif a[6].split(":")[1] == "L":
            CVSSdetail += "Confidentiality(機密性影響):" + "LOW(攻擊者可以取得機密資料，但無法使用該資料)" + '\n'
        elif a[6].split(":")[1] == "H":
            CVSSdetail += "Confidentiality(機密性影響):" + "HIGH(攻擊者可以取得機密資料，且可以使用該資料)" + '\n'

        if a[7].split(":")[1] == "N":
            CVSSdetail += "Integrity(完整性影響):" + "NONE" + '\n'
        elif a[7].split(":")[1] == "L":
            CVSSdetail += "Integrity(完整性影響):" + "LOW(攻擊者有部分權限以竄改某些資料，對含有漏洞之元件影響較小)" + '\n'
        elif a[7].split(":")[1] == "H":
            CVSSdetail += "Integrity(完整性影響):" + "HIGH(攻擊者有權限竄改所有資料，對含有漏洞之元件有嚴重影響)" + '\n'

        if a[8].split(":")[1] == "N":
            CVSSdetail += "Availability(可用性影響):" + "NONE" + '\n'
        elif a[8].split(":")[1] == "L":
            CVSSdetail += "Availability(可用性影響):" + "LOW(可用性受到影響，導致服務或元件仍可被部分取得，或是時好時壞)" + '\n'
        elif a[8].split(":")[1] == "H":
            CVSSdetail += "Availability(可用性影響):" + "HIGH(攻擊者有權限竄改所有資料，對含有漏洞之元件有嚴重影響)" + '\n'

        return CVSSdetail
def stackoverflow(CVE):
    new_cve=CVE.split('-',1)[1]
    urlstackoverflow="https://stackoverflow.com/search?q=CVE+"+new_cve
    res=requests.get(urlstackoverflow)
    sp=BeautifulSoup(res.text,'html.parser')
    aaa=sp.select('.result-link a')
    stackoverflow=""
    stackoverflow+="stackoverflow:"+'\n'
    for i in range(len(aaa)):
        stackoverflow+="https://stackoverflow.com"+aaa[i]['href']+'\n'
    return stackoverflow
def Get_Cve_NEW(CVE):
    urlNVD='https://cve.mitre.org/cgi-bin/cvename.cgi?name='+CVE
    res=requests.get(urlNVD)
    sp=BeautifulSoup(res.text,'html.parser')
    detal=sp.find_all("a",string=re.compile("^URL:http://www.securityfocus.com"))
    SecurityFocus=""
    SecurityFocus="SecurityFocus:"+'\n'
    if len(detal)!=0:
        SecurityFocus+=detal[0].text.split(":", 1)[1]+'\n'
        return SecurityFocus
    else :
        return SecurityFocus
def Get_Cve_EX(CVE):
    urlNVD='https://cve.mitre.org/cgi-bin/cvename.cgi?name='+CVE
    res=requests.get(urlNVD)
    sp=BeautifulSoup(res.text,'html.parser')
    detal=sp.find_all("a",string=re.compile("^URL:http://www.exploit-db.com/exploits/"))
    exploits=""
    exploits="exploits:"+'\n'
    if len(detal)!=0:
        exploits+=detal[0].text.split(":", 1)[1]+'\n'
        return exploits
    else :
        return exploits
def Get_Cve_packetstormsecurity(CVE):
    urlpacketstormsecurity="https://packetstormsecurity.com/search/?q="+CVE
    res=requests.get(urlpacketstormsecurity)
    sp=BeautifulSoup(res.text,'html.parser')
    Description = sp.select("dt a")
    packetstormsecuritytest=""
    packetstormsecuritytest="Packetstormsecurity:"+'\n'
    if len(Description)!=0:
        packetstormsecuritytest+=urlpacketstormsecurity
        return packetstormsecuritytest
    else :
        packetstormsecuritytest = "Packetstormsecurity:NONE!" + '\n'
        return packetstormsecuritytest

# 處理訊息
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    #message = TextSendMessage(text='Hello, world')
    #event.message.text=接收到的訊息
    first=event.message.text
    if first.split(":")[0]=="ip":
        SHODAN_API_KEY = "30H2ZRCWIvMzn7SDfY2yU9odqGtRjZ0C"  # 輸入自己的APIKEY
        api = shodan.Shodan(SHODAN_API_KEY)
        dnsResolve = 'https://api.shodan.io/dns/resolve?hostnames=' + '&key=' + SHODAN_API_KEY
        a = ""
        b = ""
        c = ""
        d = ""
        d += "您還有以下CVE漏洞，由於字數限制問題，請移動至完整版產品查看詳細資料:" + '\n'
        try:
            resolved = requests.get(dnsResolve)
            hostIP = first.split(":")[1]
            host = api.host(hostIP)
            # print ('\033[31m'+ "IP: %s" % host['ip_str'] +'\033[0m')
            a += "IP:" + str(hostIP) + '\n'
            a += "Organization: " + str(host.get('org', 'n/a')) + '\n'
            a += "Operating System: " + str(host.get('os', 'n/a')) + '\n'
            a += "Country:" + str(host.get('country_name', 'n/a'))
            if str(host.get('country_name', 'n/a')) == "Taiwan":
                a += "🇹🇼" + '\n'
            elif str(host.get('country_name', 'n/a')) == "United States":
                a += "🇺🇸" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Japan":
                a += "🇯🇵" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Canada":
                a += "🇨🇦" + '\n'
            elif str(host.get('country_name', 'n/a')) == "South Korea":
                a += "🇰🇷" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Russia":
                a += "🇷🇺" + '\n'
            elif str(host.get('country_name', 'n/a')) == "United Kingdom":
                a += "🇬🇧" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Brazil":
                a += "🇧🇷" + '\n'
            elif str(host.get('country_name', 'n/a')) == "South Africa":
                a += "🇿🇦" + '\n'
            elif str(host.get('country_name', 'n/a')) == "China":
                a += "🇨🇳" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Spain":
                a += "🇪🇸" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Italy":
                a += "🇮🇹" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Germany":
                a += "🇩🇪" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Finland":
                a += "🇫🇮" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Norway":
                a += "🇳🇴" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Hong Kong":
                a += "🇭🇰" + '\n'
            elif str(host.get('country_name', 'n/a')) == "India":
                a += "🇮🇳" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Singapore":
                a += "🇸🇬" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Indonesia":
                a += "🇮🇩" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Cambodia":
                a += "🇰🇭" + '\n'
            elif str(host.get('country_name', 'n/a')) == "France":
                a += "🇫🇷" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Ireland":
                a += "🇮🇪" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Switzerland":
                a += "🇨🇭" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Greece":
                a += "🇬🇷" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Thailand":
                a += "🇹🇭" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Vietnam":
                a += "🇻🇳" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Turkey":
                a += "🇹🇷" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Australia":
                a += "🇦🇺" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Netherlands":
                a += "🇳🇱" + '\n'
            elif str(host.get('country_name', 'n/a')) == "Chile":
                a += "🇨🇱" + '\n'
            i = 0
            a += "--------------------------------" + '\n'
            for item in host['vulns']:
                i += 1
                if i < 3:
                    CVE = item.replace('!', '')
                    CVE = str(CVE)

                    a += CVE + ':' + '\n'
                    a += Get_Cve_Description(CVE) + Get_Cve_NVD(CVE) + stackoverflow(CVE) + Get_Cve_NEW(
                        CVE) + Get_Cve_EX(CVE) + Get_Cve_packetstormsecurity(CVE)
                    a += "--------------------------------" + '\n'
                elif i >= 3 and i < 5:
                    CVE = item.replace('!', '')
                    CVE = str(CVE)

                    b += CVE + ':' + '\n'
                    b += Get_Cve_Description(CVE) + Get_Cve_NVD(CVE) + stackoverflow(CVE) + Get_Cve_NEW(
                        CVE) + Get_Cve_EX(CVE) + Get_Cve_packetstormsecurity(CVE)
                    b += "--------------------------------" + '\n'
                elif i >= 5 and i < 7:
                    CVE = item.replace('!', '')
                    CVE = str(CVE)

                    c += CVE + ':' + '\n'
                    c += Get_Cve_Description(CVE) + Get_Cve_NVD(CVE) + stackoverflow(CVE) + Get_Cve_NEW(
                        CVE) + Get_Cve_EX(CVE) + Get_Cve_packetstormsecurity(CVE)
                    c += "--------------------------------" + '\n'+""
                elif i >= 7:
                    CVE = item.replace('!', '')
                    CVE = str(CVE)
                    d += CVE + '\n'
        except:
            'An error occured'
            if a == "":
                a = "輸入錯誤or不符合格式!"
                reply_arr = []
                reply_arr.append(TextSendMessage(a))
                line_bot_api.reply_message(event.reply_token, reply_arr)
        reply_arr = []
        reply_arr.append(TextSendMessage(a))
        if i >= 3:
            reply_arr.append(TextSendMessage(b))
        if i >= 5:
            reply_arr.append(TextSendMessage(c))
        if i >= 7:
            reply_arr.append(TextSendMessage(d))
        line_bot_api.reply_message(event.reply_token, reply_arr)
    elif first.split(":")[0]=="cve":
        try:
            ccc=first.split(":")[1]
            CVElist=[]
            a=""
            b=""
            c=""
            d="您還有搜尋以下CVE漏洞，由於字數限制問題，請移動至完整版產品查看詳細資料:" + '\n'
            for i in range(len(ccc.split(" "))):
                CVElist.append(ccc.split(" ")[i])
            for i in range(len(CVElist)):
                if i < 3:
                    CVE = str(CVElist[i])
                    a += CVE + ':' + '\n'
                    a += Get_Cve_Description(CVE) + Get_Cve_NVD(CVE) + stackoverflow(CVE) + Get_Cve_NEW(
                        CVE) + Get_Cve_EX(CVE) + Get_Cve_packetstormsecurity(CVE)
                    a += "--------------------------------" + '\n'
                elif i >= 3 and i < 5:
                    CVE = str(CVElist[i])
                    b += CVE + ':' + '\n'
                    b += Get_Cve_Description(CVE) + Get_Cve_NVD(CVE) + stackoverflow(CVE) + Get_Cve_NEW(
                        CVE) + Get_Cve_EX(CVE) + Get_Cve_packetstormsecurity(CVE)
                    b += "--------------------------------" + '\n'
                elif i >= 5 and i < 7:
                    CVE = str(CVElist[i])
                    c += CVE + ':' + '\n'
                    c += Get_Cve_Description(CVE) + Get_Cve_NVD(CVE) + stackoverflow(CVE) + Get_Cve_NEW(
                        CVE) + Get_Cve_EX(CVE) + Get_Cve_packetstormsecurity(CVE)
                    c += "--------------------------------" + '\n'
                elif i >= 7:
                    CVE = str(CVElist[i])
                    d += CVE + '\n'
            reply_arr = []
            reply_arr.append(TextSendMessage(a))
            if i >= 3:
                reply_arr.append(TextSendMessage(b))
            if i >= 5:
                reply_arr.append(TextSendMessage(c))
            if i >= 7:
                reply_arr.append(TextSendMessage(d))
            line_bot_api.reply_message(event.reply_token, reply_arr)
        except:
            a = "輸入錯誤or不符合格式!"
            reply_arr = []
            reply_arr.append(TextSendMessage(a))
            line_bot_api.reply_message(event.reply_token, reply_arr)
    else:
        a = "輸入錯誤or不符合格式!"
        reply_arr = []
        reply_arr.append(TextSendMessage(a))
        line_bot_api.reply_message(event.reply_token, reply_arr)
    #message = TextSendMessage(text=a)
    #line_bot_api.reply_message(event.reply_token, message)

import os
import requests
import shodan
import re
import socket
import nmap
from bs4 import BeautifulSoup
if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)

